{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","dummy.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","id","name","email","gitLink","imageUrl","Math","floor","random","className","onClick","url","window","open","src","alt","width","height","CardList","users","map","user","i","key","login","html_url","avatar_url","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","border","children","dummy","username","App","onSearchChange","event","setState","target","value","onSubmitting","fetch","then","response","json","temp","push","gitUsers","console","log","state","this","length","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.221c7488.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n/**\r\n * Redirects the page to the github link or the homepage depending on what is passed.\r\n * @param {url}  githublink\r\n */\r\nconst goTo = (url)=> {window.open(url)};\r\n\r\n\r\n/**\r\n * This is the card in which teh fetched user is displayed. \r\n * When clicked, it takes the client to the github profile page of the user.\r\n * @param {id} id of the user\r\n * @param {name} user's name\r\n *  @param {email} email of the user\r\n *  @param {gitLink} github profile of the user\r\n *  @param {imageUrl} image of the user from their github page\r\n */\r\nconst Card = ({ id,name, \r\n                email, \r\n                gitLink, \r\n                imageUrl=`https://robohash.org/${Math.floor(Math.random() * 10) + 1}?size=200x200` }\r\n              ) => {\r\n                    return (\r\n                      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' onClick={()=>goTo(gitLink?gitLink:`#`)}>\r\n                        <img src={imageUrl} alt='users' width=\"200\" height=\"200\"  />\r\n                        <div>\r\n                          <h2>{name?name:`User not found`}</h2>\r\n                          <p>{email?email:`No email found`}</p>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n              }\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n/**\r\n * This function is the responsive container of all the user cards.\r\n * @param {users} array of users fetched \r\n */\r\nconst CardList = ({ users }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        users.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={users[i].id}\r\n              name = {users[i].name?users[i].name:users[i].login}\r\n              email = {users[i].email}\r\n              gitLink = {users[i].html_url?\r\n                users[i].html_url\r\n                :users[i].url}\r\n              imageUrl = {users[i].avatar_url}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n/**\r\n * The search bar on the homepage.\r\n * @param {searchfield} search value\r\n * @param {searChange} onChange function \r\n */\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='Enter a github user name'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ \r\n      // overflow: 'scroll', \r\n      border: '5px solid black', \r\n      // height: 800\r\n      height: 'auto'\r\n      }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","const dummy = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'}\r\n  // },\r\n  // {\r\n  //   id: 11,\r\n  //   name: 'Clementina DuBuque',\r\n  //   username: 'Moriah.Stanton',\r\n  //   email: 'Rey.Padberg@karina.biz'\r\n  // },\r\n  // {\r\n  //   id: 12,\r\n  //   name: 'Clementina DuBuque',\r\n  //   username: 'Moriah.Stanton',\r\n  //   email: 'Rey.Padberg@karina.biz'\r\n  // },\r\n  // {\r\n  //   id: 13,\r\n  //   name: 'Clementina DuBuque',\r\n  //   username: 'Moriah.Stanton',\r\n  //   email: 'Rey.Padberg@karina.biz'\r\n  // }\r\n];\r\n\r\nexport default dummy;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n//import Button from 'react-bootstrap/Button'\r\nimport dummy from '../dummy';\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      gitUsers: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n\r\n/**\r\n * Created a default placeholder for dummies from a local file \r\n * rather than fetching from https://jsonplaceholder.typicode.com/users\r\n * on the landing page\r\n */\r\n  componentDidMount() {\r\n      this.setState({ gitUsers: dummy});\r\n  }\r\n\r\n\r\n/**onchange update searchfield and then call the github API */\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value }, this.onSubmitting(event.target.value));\r\n  }\r\n\r\n\r\n/**\r\n * Fetch github users using the github rest API \r\n */\r\n  onSubmitting = (username)=>{\r\n    //console.log(this.state.searchfield)\r\n    if(username == \"\" || null){\r\n      this.setState({ gitUsers: dummy});\r\n      return;\r\n    }\r\n    \r\n    fetch(`https://api.github.com/users/${username}`)\r\n    .then(response=> response.json())\r\n    .then(users => {\r\n      let temp=[];\r\n      temp.push(users);\r\n      this.setState({ gitUsers: temp},console.log(this.state.gitUsers))  \r\n    });\r\n    \r\n  };\r\n/**\r\n * start with a loading page and then fill the dummy user-list till the client makes a search.\r\n * Update the search keys as the client types.\r\n * Make a call when the client clicks submit\r\n * \r\n */\r\n  render() {\r\n    const { gitUsers, searchfield } = this.state;\r\n\r\n    return !gitUsers.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>GitHub Users</h1>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <CardList users={gitUsers} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons'; \r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}